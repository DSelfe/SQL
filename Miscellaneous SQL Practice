--Write a MySQL query to find all overlapping tasks, where one task starts before another ends but finishes after the second task has started. 

SELECT p1.Task_ID AS Task1, p2.Task_ID AS Task2
FROM Projects p1 
JOIN Projects p2 
ON p1.Task_ID < p2.Task_ID 
WHERE p1.Start_Date <= p2.End_Date 
AND p1.End_Date >= p2.Start_Date 
; 

--Write a MySQL query to create a summary showing the count of tasks that started in each month of 2024, displaying the month name and the corresponding count.

SELECT MONTHNAME(Start_Date) AS Month_Name, COUNT(Task_ID) AS Task_Count 
FROM Projects 
WHERE YEAR(Start_Date) = 2024 
GROUP BY MONTH(Start_Date), MONTHNAME(Start_Date)
ORDER BY MONTH(Start_Date)
; 

----Write a MySQL query to identify tasks with unusually long durations, specifically those that took more than twice the average duration of all tasks. 

WITH AvgDuration AS (
  SELECT AVG(DATEDIFF(End_Date, Start_Date)) AS Avg_Task_Len 
  FROM Projects
)

SELECT Task_ID, DATEDIFF(End_Date, Start_Date) AS Task_Duration
FROM Projects, AvgDuration
WHERE DATEDIFF(End_Date, Start_Date) > AvgDuration.Avg_Task_Len * 2
ORDER BY Task_Duration DESC
; 

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| article_id    | int     |
| author_id     | int     |
| viewer_id     | int     |
| view_date     | date    |
+---------------+---------+
--There is no primary key (column with unique values) for this table, the table may have duplicate rows.
--Each row of this table indicates that some viewer viewed an article (written by some author) on some date. 
--Note that equal author_id and viewer_id indicate the same person.
 

--Write a solution to find all the authors that viewed at least one of their own articles.

--Return the result table sorted by id in ascending order. 

SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id IN (
    SELECT viewer_id
    FROM Views
    WHERE author_id = viewer_id
)
ORDER BY id ASC
; 


